TEXT_JP = {
  "text": "マイクロサービスは、アプリケーションを独立したサービスに分割する高度なアーキテクチャです。これらのサービスは独立して動作し、HTTPやgRPCなどの軽量APIを介して通信します。マイクロサービスはスケーラビリティの向上、障害耐性、継続的なデプロイの柔軟性を提供します。ただし、サービス間通信の管理、分散障害の監視、依存関係の同期などの課題も伴います。\n\nマイクロサービスの鍵となる概念は独立性です。各サービスは独自のデータベースを持ち、完全な自律性を保証し、競合のリスクを減らします。これにより、複数のチームによる同時開発が容易になります。RabbitMQやKafkaなどのツールは非同期通信を管理するために使用され、PrometheusやGrafanaはリアルタイムの監視を可能にします。最後に、Kubernetesはコンテナのオーケストレーションに使用され、分散環境でのマイクロサービスのデプロイを簡素化します。",
  "questions": [
    {
      "question": "マイクロサービスの主な利点は何ですか？",
      "options": [
        "A. すべてのサービスを集中管理する。",
        "B. スケーラビリティと柔軟性を向上させる。",
        "C. APIの必要性を削減する。",
        "D. すべてのデータベースを統合する。"
      ],
      "correct_answer": "B"
    },
    {
      "question": "コンテナのオーケストレーションに使用されるツールはどれですか？",
      "options": [
        "A. Kubernetes",
        "B. RabbitMQ",
        "C. Prometheus",
        "D. Terraform"
      ],
      "correct_answer": "A"
    },
    {
      "question": "マイクロサービスは非同期通信をどのように管理しますか？",
      "options": [
        "A. HTTPを使用する。",
        "B. RabbitMQやKafkaのようなメッセージバスを使用する。",
        "C. ローカルファイルを共有する。",
        "D. データベースを集中管理する。"
      ],
      "correct_answer": "B"
    },
    {
      "question": "マイクロサービスの基本原則は何ですか？",
      "options": [
        "A. すべてのサービスで共有されるデータベース。",
        "B. 各サービス間の完全な独立性。",
        "C. サービス間で共有されるコード。",
        "D. 使用するAPIの削減。"
      ],
      "correct_answer": "B"
    },
    {
      "question": "マイクロサービスのリアルタイム監視を可能にするツールはどれですか？",
      "options": [
        "A. MySQL",
        "B. Prometheus",
        "C. Kubernetes",
        "D. Git"
      ],
      "correct_answer": "B"
    }
  ]
}
